   for i in coordinates:
            count = len(i)
            if len(i) > 1:
                B, C = split_list(i)
                coordinates.remove(i)
                coordinates.append(B)
                coordinates.append(C)
                print(coordinates)

        for element in self.current_tetro:
                    try:
                        grid_start = element[0] + gameWidth // 3
                        pygame.draw.rect(self.screen, self.current_tetro_color,
                                        ((element[0]*self.blocks.size) + grid_start,
                                        element[1]*self.blocks.size,
                                        self.blocks.size,
                                        self.blocks.size))
                    except: print("PENDING NEW TETRO")


        try:
            for element in self.locked_tetro:
                rect, color = element
                for i in rect:
                    print("rect = " + str(i) + " color = " + str(color))
        except:
            print("not filled yet")



                for i in range(len(shape)):
            x, y = shape[i]
            r, c = new_shape[i]
            new_value = x + (x-r)
            new_value2 = y + (y-c)
            new_list.append([new_value, new_value2])


              new_list = []
        for i in range(len(shape)):
            x, y = shape[i]
            r, c = new_shape[i]
            remainder_x = x - r
            remainder_y = y - c
            print(remainder_x)
            print("currentXY = " + str(x) + " " + str(y))
            print("RC = " +str(r) +" " +str(c))
            new_list.append([remainder_x, remainder_x])